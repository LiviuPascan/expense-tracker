package com.springliviu.expensetracker.service;

import com.springliviu.expensetracker.model.User;
import com.springliviu.expensetracker.repository.UserRepository;
import org.springframework.stereotype.Service;

import java.util.List;
import java.util.Optional;

@Service
public class UserService {

    private final UserRepository userRepository;

    public UserService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    public User createOrFetchUser(String username, String password) {
        if (username == null || username.trim().isEmpty()) {
            throw new IllegalArgumentException("Username must not be empty");
        }
        if (password == null || password.trim().isEmpty()) {
            throw new IllegalArgumentException("Password must not be empty");
        }

        Optional<User> existing = userRepository.findByUsername(username);
        if (existing.isPresent()) {
            System.out.println("‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å " + username + " —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.");
            return existing.get();
        }

        User user = new User();
        user.setUsername(username);
        user.setPassword(password); // üîê –ª—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å passwordEncoder, –µ—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ–¥
        userRepository.save(user);
        System.out.println("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω.");
        return user;
    }

    // üîê –ú–µ—Ç–æ–¥ —Ç–æ–ª—å–∫–æ –¥–ª—è ADMIN ‚Äî –ø–æ–ª—É—á–∏—Ç—å –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    public List<User> getAllUsers() {
        return userRepository.findAll();
    }
}
